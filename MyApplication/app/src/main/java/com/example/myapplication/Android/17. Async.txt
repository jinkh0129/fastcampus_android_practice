//** 동기 **//
 - 작업을 순서대로 진행을 함
 - A -> B -> C
 - 위에서부터 아래로 코드를 실행


//** 비동기 **//
 - Thread를 만들어서 작업을 따로 처리한다.
 - 엄밀히 말하면 BackGround에서 작업을 한 것을 MainThread로 받아서 처리하는 것이다.
 - MainThread는 결과를 받아서 하고 싶은 작업을 하는 것이다.


 - 안드로이드에서 Async를 다루는 방법
    --> AsyncTask를 상속받는다
     - onPreExecute : 쓰레드 출발하기 전에 할 작업
     - doIntBackGround : 쓰레드가 할 작업
     - onProgressUpdate : 백그라운드에서 하는 작업의 과정을 중간 중간 메인쓰레드에게 알려주는 것
        --> progressBar 응용 가능
     - onPostExecute : 작업을 다 마친 후 메인쓰레드로 돌아옴



 - Async의 장점
    --> 메인쓰레드를 기다리게 할 필요가 없다.
    --> 보통 네트워크 작업을 할 때 사용한다.
        ==> 네트워크 작업을 한다는 것은 외부로 요청을 하고 받는 것이다.
        ==> 요청을 보내고 받기까지 시간이 있다. 그런데 그 비는 시간을 Async를 사용해서 하는 것이다.
        ==> 사용하지 않으면 요청에 대한 응답을 받기까지 메인쓰레드는 아무것도 할 수 없다.
        ==> **메인쓰레드는 절대 멈춰두면 안된다**



 -Async의 단점
    --> 재사용이 불가능하다.
    --> 구현된 Activity가 종료될 경우 같이 종료되지 않는다.
        ==> ex)사용자가 백버튼을 눌러서 액티비티를 나가도 Task를 종료시키지 않는다.
        ==> (라이프사이클)onPause()에서 task?.cancel(true)와 같은 식으로 정지시켜야한다.
    --> AsyncTask는 하나만 실행될 수 있다(병렬처리 X)
